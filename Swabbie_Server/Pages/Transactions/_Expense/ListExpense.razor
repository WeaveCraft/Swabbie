@page "/expense"
@inject IExpenseRepository _expenseRepository


<MudPaper Class="d-flex align-start flex-grow-1 gap-4" Elevation="0">
    <MudPaper Class="align-self-end py-4 flex-1">
        <div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@_readOnly" Color="Color.Primary">Read Only</MudSwitch>
            <div class="d-flex justify-start align-center">
                <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Form</p>
                <MudSwitch @bind-Checked="@_isCellEditMode">Cell</MudSwitch>
            </div>
            <div class="d-flex justify-start align-center">
                <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Manual</p>
                <MudSwitch @bind-Checked="@_editTriggerRowClick">On Row Click</MudSwitch>
            </div>
        </div>
    </MudPaper>
</MudPaper>

<MudPaper Class="d-flex align-start flex-grow-1 gap-4" Elevation="0">
    <MudPaper Class="py-16 flex-1">
        <_UpsertDialogExpense />
        <MudDataGrid T="ExpenseDTO" Items="@Expenses.Take(5)" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
                     Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)"
                     StartedEditingItem="@StartedEditingItem" CancelledEditingItem="@CancelledEditingItem" CommittedItemChanges="@CommittedItemChanges">

            <Columns>
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                <Column T="ExpenseDTO" Field="@nameof(ExpenseDTO.TransactionDate)">
                    <EditTemplate>
                        <MudDatePicker @bind-Date="context.Item.TransactionDate" ShowWeekNumbers="true" />
                    </EditTemplate>
                </Column>
                <Column T="ExpenseDTO" Field="@nameof(ExpenseDTO.Amount)" />
                <Column T="ExpenseDTO" Field="@nameof(ExpenseDTO.CurrencyType)">
                    <EditTemplate>
                        <MudRadioGroup Class="my-4" @bind-SelectedOption="context.Item.CurrencyType">
                            @foreach (CurrencyCat currency in Enum.GetValues(typeof(CurrencyCat)))
                            {
                                <MudRadio Option="currency" Color="Color.Warning">@currency</MudRadio>
                            }
                        </MudRadioGroup>
                    </EditTemplate>
                </Column>
                <Column T="ExpenseDTO" Field="@nameof(ExpenseDTO.TransactionType)">
                    <EditTemplate>
                        <MudSelect Class="my-4" @bind-Value="context.Item.TransactionType">
                            @foreach (TransactionCat transaction in Enum.GetValues(typeof(TransactionCat)))
                            {
                                <MudSelectItem Value="transaction" Color="Color.Warning">@transaction</MudSelectItem>
                            }
                        </MudSelect>
                    </EditTemplate>
                </Column>
                <Column T="ExpenseDTO" Field="@nameof(ExpenseDTO.Category)">
                    <EditTemplate>
                        <MudSelect Class="my-4" @bind-Value="context.Item.Category">
                            @foreach (ExpenseCat category in Enum.GetValues(typeof(ExpenseCat)))
                            {
                                <MudSelectItem Value="category" Color="Color.Warning">@category</MudSelectItem>
                            }
                        </MudSelect>
                    </EditTemplate>
                </Column>
                <Column T="ExpenseDTO" Field="@nameof(ExpenseDTO.Description)" />
                <Column T="ExpenseDTO" Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
                        <MudIconButton @onclick="()=>HandleDelete(context.Item.Id)" Color="Color.Secondary" Size="Size.Small" Icon="@Icons.Outlined.Delete" />

                    </CellTemplate>
                </Column>
            </Columns>
        </MudDataGrid>
    </MudPaper>
</MudPaper>

@code {
    [Parameter]
    public int Id { get; set; }
    private IEnumerable<ExpenseDTO> Expenses = new List<ExpenseDTO>();
    private ExpenseDTO Expense = new ExpenseDTO();
    private bool _readOnly;
    private bool _isCellEditMode;
    private bool _editTriggerRowClick;
    private string _searchString;

    protected override async Task OnInitializedAsync()
    {
        Expenses = await _expenseRepository.GetAll();
    }

    void StartedEditingItem(ExpenseDTO item)
    {
        _expenseRepository.Update(item);
    }

    void CancelledEditingItem(ExpenseDTO item)
    {
        _expenseRepository.Update(item);
    }

    void CommittedItemChanges(ExpenseDTO item)
    {
        _expenseRepository.Update(item);
    }
    private async Task HandleDelete(int id)
    {
        await _expenseRepository.Delete(id);
        Expenses = await _expenseRepository.GetAll();
    }

    private Func<ExpenseDTO, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{x.Amount} {x.Category} {x.Description}".Contains(_searchString))
            return true;

        return false;
    };
}