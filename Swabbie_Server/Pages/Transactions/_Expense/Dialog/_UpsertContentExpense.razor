@inject IExpenseRepository _expenseRepository

<MudDialog>
    <DialogContent>
        <EditForm Model="Expenses" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <MudTextField @bind-Value="Expenses.Name" T="string" Label="Name"></MudTextField>
            <MudTextField @bind-Value="Expenses.Description" T="string" Label="Description"></MudTextField>
            <MudTextField @bind-Value="Expenses.Amount" T="decimal" Label="Price"></MudTextField>
            <MudRadioGroup Class="my-4" @bind-bind-SelectedOption="Expenses.TransactionType" T="Enum">
                @foreach (Enum type in Enum.GetValues(typeof(TransactionCat)))
                {
                    <MudRadio Option="type" Color="Color.Warning">@type.ToString()</MudRadio>
                }
            </MudRadioGroup>
            <MudSelect Class="my-4" @bind-bind-SelectedValues="Expenses.Category" T="Enum" Label="Category">
                @foreach (Enum cat in Enum.GetValues(typeof(ExpenseCat)))
                {
                    <MudSelectItem Value="cat">@cat.ToString()</MudSelectItem>
                }
            </MudSelect>
            <MudDatePicker Label="Date" @bind-bind-PickerMonth="Expenses.TransactionDate" OpenTo="OpenTo.Month" Date="@DateTime.UtcNow" DateFormat="dd.MM.yyyy" ShowWeekNumbers="true"/>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="HandleSubmit">Ok</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private ExpenseDTO Expenses { get; set; } = new ExpenseDTO();

    private async Task HandleSubmit()
    {
        await _expenseRepository.Create(Expenses);
        MudDialog.Close(DialogResult.Ok(true));
    }
}