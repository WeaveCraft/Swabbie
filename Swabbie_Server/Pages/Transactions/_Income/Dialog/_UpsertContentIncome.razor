@inject IIncomeRepository _incomeRepository

<MudDialog>
    <DialogContent>
        <EditForm Model="Incomes" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <MudTextField @bind-Value="Incomes.Name" T="string" Label="Name"></MudTextField>
            <MudTextField @bind-Value="Incomes.Description" T="string" Label="Description"></MudTextField>
            <MudTextField @bind-Value="Incomes.Amount" T="decimal" Label="Price"></MudTextField>
            <MudRadioGroup Class="my-4" @bind-SelectedOption="Incomes.TransactionType">
                @foreach (TransactionCat type in Enum.GetValues(typeof(TransactionCat)))
                {
                    <MudRadio Option="type" Color="Color.Warning">@type</MudRadio>
                }
            </MudRadioGroup>
            <MudSelect Class="my-4" @bind-Value="Incomes.Category" Label="Category">
                @foreach (IncomeCat cat in Enum.GetValues(typeof(IncomeCat)))
                {
                    <MudSelectItem Value="cat">@cat</MudSelectItem>
                }
            </MudSelect>
            <MudDatePicker @bind-Date="Incomes.TransactionDate" Label="Date" ShowWeekNumbers="true"></MudDatePicker>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="HandleSubmit">Ok</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private IncomeDTO Incomes { get; set; } = new IncomeDTO();

    private async Task HandleSubmit()
    {
        await _incomeRepository.Create(Incomes);
        MudDialog.Close(DialogResult.Ok(true));
    }
}