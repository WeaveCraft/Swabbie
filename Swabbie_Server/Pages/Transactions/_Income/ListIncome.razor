@page "/income"
@inject IIncomeRepository _incomeRepository
@inject IJSRuntime _jsRuntime

<_UpsertDialogIncome />
<MudTable Items="@Incomes" Hover="true" Breakpoint="Breakpoint.Sm" RightAlignSmall="true">
    <HeaderContent>
        <MudTh>Category</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Transaction Type</MudTh>
        <MudTh>Transaction Date</MudTh>
        <MudTh>Amount</MudTh>
        <MudTextField @bind-Value="searchString" Placeholder="Search for Expenses..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Category">@context.Category</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Transaction Type">@context.TransactionType</MudTd>
        <MudTd DataLabel="Transaction Date">@context.TransactionDate</MudTd>
        <MudTd DataLabel="Price">$@context.Amount</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="()=>HandleDelete(context.Id)" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private IEnumerable<IncomeDTO> Incomes { get; set; } = new List<IncomeDTO>();
    private int DeleteExpenseId { get; set; } = 0;
    private string searchString = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadExpenses();
        }
    }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private async Task LoadExpenses()
    {
        Incomes = await _incomeRepository.GetAll();
        StateHasChanged();
    }

    private bool Search(ExpenseDTO expense)
    {
        if (expense.Name is not null && expense.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || expense.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private async Task HandleDelete(int id)
    {
        await _incomeRepository.Delete(id);
        await LoadExpenses();
    }
}