@page "/income"
@inject IIncomeRepository _incomeRepository
@inject IJSRuntime _jsRuntime

<_UpsertDialogIncome />
<MudTable Items="@Incomes" Hover="true" Breakpoint="Breakpoint.Sm" RightAlignSmall="true">
    <HeaderContent>
        <MudTh>Category</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Transaction Type</MudTh>
        <MudTh>Transaction Date</MudTh>
        <MudTh>Amount</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Category">@context.Category</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Transaction Type">@context.TransactionType</MudTd>
        <MudTd DataLabel="Transaction Date">@context.TransactionDate</MudTd>
        <MudTd DataLabel="Price">$@context.Amount</MudTd>
    </RowTemplate>
</MudTable>

@code {
    private IEnumerable<IncomeDTO> Incomes { get; set; } = new List<IncomeDTO>();
    public bool IsLoading { get; set; }
    private int DeleteIncomeId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadIncomes();
        }
    }

    private async Task LoadIncomes()
    {
        IsLoading = true;
        StateHasChanged();
        Incomes = await _incomeRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteIncomeId = id;
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeleteIncomeId != 0)
        {
            //delete
            IncomeDTO income = await _incomeRepository.Get(DeleteIncomeId);
            await _incomeRepository.Delete(DeleteIncomeId);
            await LoadIncomes();
        }
        IsLoading = false;
    }
}